#include <stdio.h>

double findMedianSortedArrays(int arr[], int size) {
    if (size % 2 != 0) {
        return (double)arr[size / 2];
    } else {
        double middle1 = arr[size / 2 - 1];
        double middle2 = arr[size / 2];
        return (middle1 + middle2) / 2.0;
    }
}

void mergeArrays(int arr1[], int m, int arr2[], int n, int merged[]) {
    int a = 0;

    for (int i = 0; i < m; i++) {
        merged[a++] = arr1[i];
    }

    for (int i = 0; i < n; i++) {
        merged[a++] = arr2[i];
    }
}

void bubbleSort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main()
{
    int m, n;

    printf("Enter size of array 1: ");
    scanf("%d", &m);

    printf("Enter size of array 2: ");
    scanf("%d", &n);

    int arr1[m], arr2[n];

    printf("Enter elements of array 1: ");
    for (int i = 0; i < m; i++) {
        scanf("%d", &arr1[i]);
    }

    printf("Enter elements of array 2: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr2[i]);
    }

    bubbleSort(arr1, m);
    bubbleSort(arr2, n);

    int mergedSize = m + n;
    int merged[mergedSize];
    mergeArrays(arr1, m, arr2, n, merged);

    double median = findMedianSortedArrays(merged, mergedSize);
    printf("Median: %.2lf\n", median);

    return 0;
}
